//? =============== Function ================== //

// Функція - це підпрограма, незалежна частина коду, призначена для багаторазового виконання конкретної задачі з різними початковими значеннями.
// Функції дозволяють структурувати великі програми, зменшують повторення та ізолюють код.

// Функцію можна уявити у вигляді чорного ящика: вона отримує щось на вході (дані), і повертає щось на виході (результат виконання коду всередині неї).

//? Оголошення функції
// 1. Оголошення функції multiply
// function multiply() {
	// Тіло функції
//   console.log("Це лог на момент виклику функції multiply");
// }

// 2. Виклики функції multiply
// multiply(); // 'Це лог на момент виклику функції multiply'
// multiply(); // 'Це лог на момент виклику функції multiply'
// multiply(); // 'Це лог на момент виклику функції multiply'

// Оголошення функції(function declaration) починається з ключового слова function, після якого стоїть ім'я - дієслово,
// що відповідає на запитання «Що зробити ?» і пара круглих дужок.

// Тіло функції береться у фігурні дужки { } і містить інструкції, які необхідно виконати на момент її виклику.
// 	Потім, коли необхідно, функція викликається за допомогою імені і пари круглих дужок.

// В круглих дужках після імені функції зазначаються параметри - перелік даних, які функція очікує на момент виклику.
// Параметри - це локальні змінні, доступні тільки у тілі функції.
// Вони розділяються комами.
// Параметрів може бути декілька, або взагалі не бути, у такому випадку записуються просто порожні круглі дужки.
// На момент виклику функції, в круглих дужках можна передати аргументи - значення для оголошених параметрів функції.

//? 1. Оголошення параметрів x, y, z
// function multiply(x, y, z) {
//   console.log(`Результат множення дорівнює ${x * y * z}`);
// }

//? 2. Передача аргументів
// multiply(2, 3, 5); // Результат множення дорівнює 30
// multiply(4, 8, 12); // Результат множення дорівнює 384
// multiply(17, 6, 25); // Результат множення дорівнює 2550

//? Оператор return використовується для передачі значення з тіла функції у зовнішній код.
// Коли інтерпретатор зустрічає return, він відразу ж виходить з функції(припиняє її виконання), і повертає вказане значення у те місце коду, де була викликана функція.

// function multiply(x, y, z) {
//   console.log("Код до return виконується звичайним чином");

//   Повертаємо результат виразу множення
//   return x * y * z;

//   console.log("Цей лог ніколи не виконається, він стоїть після return");
// }

// Результат роботи функції можна зберегти у змінну
// let result = multiply(2, 3, 5);
// console.log(result); // 30

// result = multiply(4, 8, 12);
// console.log(result); // 384

// result = multiply(17, 6, 25);
// console.log(result); // 2550

// Оператор return без явно вказаного значення повертає спеціальне значення undefined.
// За відсутності return в тілі функції, вона все одно поверне undefined.

//? Параметри за замовчуванням
// Іноді необхідно оголосити функцію, у параметрів якої будуть значення, відмінні від undefined, навіть якщо для них не передали аргументи.
// Це робиться дуже простим та очевидним чином - достатньо вказати значення за замовчуванням безпосередньо на момент оголошення параметрів у підписі функції.
// У випадку такого запису, якщо для параметра не було передано значення аргументу, використовується значення за замовчуванням.

// function count(countFrom = 0, countTo = 10, step = 1) {
//   console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);

//   for (let i = countFrom; i <= countTo; i += step) {
//     console.log(i);
//   }
// }

// count(1, 5); // countFrom = 1, countTo = 5, step = 1
// count(2); // countFrom = 2, countTo = 10, step = 1
// count(); // countFrom = 0, countTo = 10, step = 1

//? Термін slug - це людино - зрозумілий унікальний ідентифікатор, який використовується у веб - розробці для створення читабельних URL - адрес.
// Наприклад, замість того, щоб користувач побачив в адресному рядку mysite.com / posts / 1q8fh74tx, можна зробити slug з назви статті.
// В результаті адреса буде приємнішою для сприйняття: mysite.com / posts / arrays -for-begginers.
//!Увага
// Slug - це завжди рядок у нижньому регістрі, слова якого розділені тире.


//? Напиши функцию поиска логина
//? - Если логина нет, вывести сообщение "Пользователь (логин) не найден"
//? - Если логин найден, вывести сообщение "Пользователь (логин) найден"
/* ----- for... of ------- */
// const logins = ['sdgsdsdhns', 'sdgsdgdsggf', 'login888', 'dgsdgsdgsdg'];

// function findLogin(allLogins, loginToFind) {
// 	for (const login of logins) {
// 		if (login === loginToFind) {
// 			return `Пользователь ${loginToFind} найден`;
// 		}
// 	}
// 	return `Пользователь ${loginToFind} не найден`;
// }
// console.log(findLogin(logins, 'login888'));

/* -------- тернарный оператор -------- */
// const logins = ['sdgsdsdhns', 'sdgsdgdsggf', 'login888', 'dgsdgsdgsdg'];

// function findLogin(allLogins, loginToFind) {
// 	return allLogins.includes(loginToFind)
// 		? `Пользователь ${loginToFind} найден`
// 		: `Пользователь ${loginToFind} не найден`;
// };
// console.log(findLogin(logins, 'login888'));
