//? ================= Callback =====================

/*
Необходимо написать логику обработки заказа пиццы.
Выполни рефакторинг метода order так, чтобы он принимал вторым и третим параметрами два колбэка onSuccess и onError.

Если в свойстве pizzas нет пиццы с названием из параметра pizzaName, метод order должен возвращать результат вызова колбэка onError, 
передавая ему аргументом строку "There is no pizza with a name <имя пиццы> in the assortment."
Если в свойстве pizzas есть пицца с названием из параметра pizzaName, метод order должен возвращать результат вызова колбэка onSuccess,
передавая ему аргументом имя заказанной
*/

// const pizzaPalace = {
//   pizzas: ['Ultracheese', 'Smoked', 'Four meats'],
//   order(pizzaName, onSuccess, onError) {
//     const { pizzas } = this;
//     if (pizzas.includes(pizzaName)) {
//       return onSuccess(pizzaName);
//     }
//     return onError(pizzaName);
//   },
// };
// // Change code above this line

// // Callback for onSuccess
// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }

// // Callback for onError
// function onOrderError(error) {
//   return `Error! There is no pizza with a name ${error} in the assortment.`;
// }

// // Method calls with callbacks
// console.log(pizzaPalace.order('Smoked', makePizza, onOrderError));
// console.log(pizzaPalace.order('Four meats', makePizza, onOrderError));
// console.log(pizzaPalace.order('Big Mike', makePizza, onOrderError));
// console.log(pizzaPalace.order('Vienna', makePizza, onOrderError));

//? -------------------------------------------------------

// function changeEven(numbers, value) {
//   const newArray = [];
//   numbers.forEach((element) => {
//     element % 2 === 0 ? newArray.push(element + value) : newArray.push(element);
//   });
//   return newArray;
// }

// console.log(changeEven([1, 2, 3, 4, 5], 10));

//? -------------------------------------------------------
// const arrTest = [2, 3, 4, 5, 6];

// function randomArr(arr) {
//   const newArr = [...arr];

//   newArr
//     .sort(() => Math.random() - 0.5)
//     .map((number) => arr.indexOf(number) * number);

//   return newArr;
// }
// console.log(randomArr(arrTest));
//? -------------------------------------------------

// class StringBuilder {
//   constructor(initialValue) {
//     this.value = initialValue;
//   }
//   getValue() {
//     return this.value;
//   }
//   padEnd(str) {
//     this.value += str;
//   }
//   padStart(str) {
//     this.value = str + this.value;
//   }
//   padBoth(str) {
//     this.value = str + this.value + str;
//   }
// }

// const builder = new StringBuilder('.');
// console.log(builder.getValue()); // "."
// builder.padStart('^');
// console.log(builder.getValue()); // "^."
// builder.padEnd('^');
// console.log(builder.getValue()); // "^.^"
// builder.padBoth('=');
// console.log(builder.getValue()); // "=^.^="

//?=========================================

Задача . Объекты (ассоциативные массивы)
Задача. Создайте ассоциативный массив (объект) заработных плат obj. Выведите на экран зарплату Пети и Коли.

//Этот объект дан:
var obj = {'Коля':'1000', 'Вася':'500', 'Петя':'200'};
Решение: Чтобы вывести зарплату Коли следует вывести значение элемента объекта с ключом 'Коля'. Сделаем это:

var obj = {'Коля':'1000', 'Вася':'500', 'Петя':'200'};
alert(obj['Коля']); //выведет 1000
Задача . Способы создания массива
Задача. Создайте массив arr с элементами 1, 2, 3, 4, 5 двумя различными способами.

Решение:

Первый способ создать массив - объявить его через [ ]:

var arr = [1, 2, 3, 4, 5];
Второй способ создания массива - это поступить таким образом:

var arr = [];
arr[0] = 1;
arr[1] = 2;
arr[2] = 3;
arr[3] = 4;
arr[4] = 5;
Задача . Многомерный массив
Задача. Дан многомерный массив arr:

var arr = {
	'ru':['голубой', 'красный', 'зеленый'],
	'en':['blue', 'red', 'green'],
};
Выведите с его помощью слово 'голубой'.

Решение: так как массив многомерный (в нашем случае двухмерный), то нам придется написать несколько квадратных скобок подряд. Поясню это по шагам. Давайте сделаем так:

alert(arr['ru']);
В этом случае результатом будет массив ['голубой','красный', 'зеленый'], который является частью нашего многомерного массива. Чтобы вывести слово 'голубой', необходимо дописать еще одну квадратную скобку с ключом, соответствующим этому элементу (у него нет явного ключа - значит его ключ 0):

alert(arr['ru'][0]); //выведет 'голубой'
Выведем теперь слово 'красный':

alert(arr['ru'][1]); //выведет 'красный'
Выведем 'red':

alert(arr['en'][1]); //выведет 'red'
Задачи для решения
Работа с массивами
 Создайте массив arr = ['a', 'b', 'c']. Выведите его на экран с помощью функции alert.

 С помощью массива arr из предыдущего номера выведите на экран содержимое первого, второго и третьего элементов.

 Создайте массив arr = ['a', 'b', 'c', 'd'] и с его помощью выведите на экран строку 'a+b, c+d'.

 Создайте массив arr с элементами 2, 5, 3, 9. Умножьте первый элемент массива на второй, а третий элемент на четвертый. Результаты сложите, присвойте переменной result. Выведите на экран значение этой переменной.

Объекты (ассоциативные массивы)
 Создайте объект obj. Выведите на экран элемент с ключом 'c' двумя способами: через квадратные скобки и как свойство объекта:

var obj = {a: 1, b: 2, c: 3};
 Создайте массив заработных плат obj. Выведите на экран зарплату Пети и Коли.

var obj = {Коля: '1000', Вася: '500', Петя: '200'};
 Создайте объект с днями недели. Ключами в нем должны служить номера дней от начала недели (понедельник - первый и т.д.). Выведите на экран текущий день недели.

 Пусть теперь номер дня недели хранится в переменной day, например там лежит число 3. Выведите день недели, соответствующий значению переменной day.

Многомерные массивы
 Дан массив [ [1, 2, 3], [4, 5, 6], [7,8,9] ]. Выведите на экран цифру 4 из этого массива.

 Дан объект {js:['jQuery', 'Angular'], php: 'hello', css: 'world'}. Выведите с его помощью слово 'jQuery'.

 Создайте двухмерный массив. Первые два ключа - это 'ru' и 'en'. Пусть первый ключ содержит элемент, являющийся массивом названий дней недели по-русски, а второй - по-английски. Выведите с помощью этого массива понедельник по-русски и среду по английски (пусть понедельник - это нулевой день).

 Пусть теперь в переменной lang хранится язык(она принимает одно из значений или 'ru', или 'en' - либо то, либо то), а в переменной day - номер дня.Выведите словом день недели, соответствующий переменным lang и day.То есть: если, к примеру, lang = 'ru' и day = 3 - то выведем 'среда'.
 
 Задача 
Задача. Если переменная a равна 10, то выведите 'Верно', иначе выведите 'Неверно'.

Решение:

var num = 10;
if (num == 10) {
	alert('Верно');
} else {
	alert('Неверно');
}
Задача 
Задача. В переменной min лежит число от 0 до 59. Определите в какую четверть часа попадает это число (в первую, вторую, третью или четвертую).

Решение:

var min = 10;
if (min >= 0 && min <= 14) {
	alert('В первую четверть.');
}
if (min >= 15 && min <= 30) {
	alert('Во вторую четверть.');
}
if (min >= 31 && min <= 45) {
	alert('В третью четверть.');
}
if (min >= 46 && min <= 59) {
	alert('В четвертую четверть.');
}
Задача 
Переменная lang может принимать 2 значения: 'ru' 'en'. Если она имеет значение 'ru', то в переменную arr запишем массив дней недели на русском языке, а если имеет значение 'en' – то на английском. Решите задачу через 2 if, через switch-case и через многомерный массив без ифов и switch.

Решение:

Решение через 2 if:

var lang = 'ru';
if (lang == 'ru') {
	var arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
}
if (lang == 'en') {
	arr = ['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'];
}
alert(arr);
Решение через switch-case:

var lang = 'ru';
switch (lang) {
	case 'ru':
		var arr = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
	break;
	case 'en':
		arr = ['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'];
	break;
}
alert(arr);
Решение через многомерный массив:

var lang = 'ru';
var arr = {
	'ru':['пн', 'вт', 'ср','чт', 'пт', 'сб', 'вс'],
	'en':['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'],
};
alert(arr[lang]);
Задачи для решения
Работа с if-else
 Если переменная a равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 1, 0, -3.

 Если переменная a больше нуля, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 1, 0, -3.

 Если переменная a меньше нуля, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 1, 0, -3.

 Если переменная a больше или равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 1, 0, -3.

 Если переменная a меньше или равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 1, 0, -3.

 Если переменная a не равна нулю, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 1, 0, -3.

 Если переменная a равна 'test', то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 'test', 'тест', 3.

 Если переменная a равна '1' и по значению и по типу, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном '1', 1, 3.

Работа с логическими переменными
 Если переменная test равна true, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при test, равном true, false. Напишите два варианта скрипта - с короткой записью и с длинной.

 Если переменная test не равна true, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при test, равном true, false. Напишите два варианта скрипта - с короткой записью и с длинной.

Работа с && (и) и || (или)
 Если переменная a больше нуля и меньше 5-ти, то выведите 'Верно', иначе выведите 'Неверно'. Проверьте работу скрипта при a, равном 5, 0, -3, 2.

 Если переменная a равна нулю или равна двум, то прибавьте к ней 7, иначе поделите ее на 10. Выведите новое значение переменной на экран. Проверьте работу скрипта при a, равном 5, 0, -3, 2.

 Если переменная a равна или меньше 1, а переменная b больше или равна 3, то выведите сумму этих переменных, иначе выведите их разность (результат вычитания). Проверьте работу скрипта при a и b, равном 1 и 3, 0 и 6, 3 и 5.

 Если переменная a больше 2-х и меньше 11-ти, или переменная b больше или равна 6-ти и меньше 14-ти, то выведите 'Верно', в противном случае выведите 'Неверно'.

На switch-case
 Переменная num может принимать 4 значения: 1, 2, 3 или 4. Если она имеет значение '1', то в переменную result запишем 'зима', если имеет значение '2' – 'весна' и так далее. Решите задачу через switch-case.

Задачи
 В переменной day лежит какое-то число из интервала от 1 до 31. Определите в какую декаду месяца попадает это число (в первую, вторую или третью).

 В переменной month лежит какое-то число из интервала от 1 до 12. Определите в какую пору года попадает этот месяц (зима, лето, весна, осень).

 Дана строка, состоящая из символов, например, 'abcde'. Проверьте, что первым символом этой строки является буква 'a'. Если это так - выведите 'да', в противном случае выведите 'нет'.

 Дана строка с цифрами, например, '12345'. Проверьте, что первым символом этой строки является цифра 1, 2 или 3. Если это так - выведите 'да', в противном случае выведите 'нет'.

 Дана строка из 3-х цифр. Найдите сумму этих цифр. То есть сложите как числа первый символ строки, второй и третий.

 Дана строка из 6 - ти цифр.Проверьте, что сумма первых трех цифр равняется сумме вторых трех цифр.Если это так - выведите 'да', в противном случае выведите 'нет'.
	 
	 
Задача 
Задача. Выведите столбец чисел от 1 до 50.

Решение: воспользуемся циклом while (отделим числа тегом br друг от друга, чтобы получить столбец, а не строку):

var i = 1;
while (i <= 50) {
	document.write(i + '<br>');
	i++;
}
Можно также воспользоваться и циклом for:

for (var i = 1; i <= 50; i++) {
	document.write(i + '<br>');
}
Задача 
Задача. Дан массив с элементами [1, 2, 3, 4, 5]. С помощью цикла for выведите все эти элементы на экран.

Решение: будем повторять цикл for от 0 до номера последнего элемента массива. Этот номер на единицу меньше количества элементов в массиве, которое можно найти с помощью свойства length таким образом: arr.length.

Чтобы цикл прокрутился на единицу меньше длины массива, в условие окончания мы поставим <, а не <=.

К элементам массива будем обращаться так: arr[i]. При этом переменная i - это счетчик цикла, который будет меняться от нуля до arr.length (не включительно). Таким образом мы последовательно выведем все элементы массива на экран (отделив их тегом br друг от друга):

var arr = [1, 2, 3, 4, 5];
for (var i = 0; i < arr.length; i++) {
	document.write(arr[i] + '<br>');
}
Задача 
Задача. Дан массив с элементами [2, 3, 4, 5]. С помощью цикла for найдите произведение элементов этого массива.

Решение: для таких задач существует стандартное решение, которое заключается в том, что циклом for перебираются элементы массива и их произведение последовательно записывается в переменную result (в ней постепенно накапливается искомое произведение):

var result = 1;
var arr = [2, 3, 4, 5];
for (var i = 0; i < arr.length; i++) {
	result = result * arr[i];
}
alert(result);
Как это работает: изначально переменная result имеет значение 1, затем при первом проходе цикла в нее записывается ее текущее содержимое (это 1), умноженное на первый элемент массива (это 2). Получится, что в result запишется 1*2 и теперь там будет лежать число 2.

При следующем проходе цикла в result запишется текущее значение result, умноженное на второй элемент массива (то есть 2*3=6). И так далее пока массив не закончится.

Можно переписать строчку result = result * arr[i] через *= для краткости:

var result = 1;
var arr = [2, 3, 4, 5];
for (var i = 0; i < arr.length; i++) {
	result *= arr[i];
}
alert(result);
Задача . Цикл for-in
Задача. Дан объект obj с ключами 'Минск', 'Москва', 'Киев' с элементами 'Беларусь', 'Россия', 'Украина'. С помощью цикла for-in выведите на экран строки такого формата: 'Минск - это Беларусь.'.

Решение: задача не представляет сложности если уметь работать с циклом for-in. Давайте решать задачу поэтапно. Для начала выведем на экран все ключи объекта (это названия городов):

var obj = {
	'Минск': 'Беларусь',
	'Москва': 'Россия',
	'Киев': 'Украина'
};

for (var key in obj) {
	alert(key);
}
А теперь выведем все значения объекта (это страны):

var obj = {
	'Минск': 'Беларусь',
	'Москва': 'Россия',
	'Киев': 'Украина'
};

for (var key in obj) {
	alert(obj[key]);
}
Ну, а теперь сформируем строки нужного нам формата:

var obj = {
	'Минск': 'Беларусь',
	'Москва': 'Россия',
	'Киев': 'Украина'
};

for (var key in obj) {
	alert(key + ' - это ' + obj[key] + '.');
}
Задачи для решения
Циклы while и for
Решите эти задачи сначала через цикл while, а затем через цикл for.
 Выведите столбец чисел от 1 до 100.

 Выведите столбец чисел от 11 до 33.

 Выведите столбец четных чисел в промежутке от 0 до 100.

 С помощью цикла найдите сумму чисел от 1 до 100.

Работа с for для массивов
 Дан массив с элементами [1, 2, 3, 4, 5]. С помощью цикла for выведите все эти элементы на экран.

 Дан массив с элементами [1, 2, 3, 4, 5]. С помощью цикла for найдите сумму элементов этого массива. Запишите ее в переменную result.

Работа с for-in
 Дан объект obj. С помощью цикла for-in выведите на экран ключи и элементы этого объекта.

	var obj = {green: 'зеленый', red: 'красный', blue: 'голубой'}
 Дан объект obj с ключами Коля, Вася, Петя с элементами '200', '300', '400'. С помощью цикла for-in выведите на экран строки такого формата: 'Коля - зарплата 200 долларов.'.

Задачи
 Дан массив с элементами 2, 5, 9, 15, 0, 4. С помощью цикла for и оператора if выведите на экран столбец тех элементов массива, которые больше 3-х, но меньше 10.

 Дан массив с числами. Числа могут быть положительными и отрицательными. Найдите сумму положительных элементов массива.

 Дан массив с элементами 1, 2, 5, 9, 4, 13, 4, 10. С помощью цикла for и оператора if проверьте есть ли в массиве элемент со значением, равным 4. Если есть - выведите на экран 'Есть!' и выйдите из цикла. Если нет - ничего делать не надо.

 Дан массив числами, например: [10, 20, 30, 50, 235, 3000]. Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.

 Дан массив с элементами 1, 2, 3, 4, 5, 6, 7, 8, 9. С помощью цикла for создайте строку '-1-2-3-4-5-6-7-8-9-'.

 Составьте массив дней недели. С помощью цикла for выведите все дни недели, а выходные дни выведите жирным.

 Составьте массив дней недели. С помощью цикла for выведите все дни недели, а текущий день выведите курсивом. Текущий день должен храниться в переменной day.

 Дано число n = 1000. Делите его на 2 столько раз, пока результат деления не станет меньше 50. Какое число получится ? Посчитайте количество итераций, необходимых для этого(итерация - это проход цикла), и запишите его в переменную num.
	 
Задачи на математические функции JavaScript
	 
	 Работа с %
 Даны переменные a = 10 и b = 3. Найдите остаток от деления a на b. Показать решение.

 Даны переменные a и b. Проверьте, что a делится без остатка на b. Если это так - выведите 'Делится' и результат деления, иначе выведите 'Делится с остатком' и остаток от деления. Показать решение.

Работа со степенью и корнем
Для решения задач данного блока вам понадобятся следующие методы: Math.pow, Math.sqrt.
 Возведите 2 в 10 степень. Результат запишите в переменную st.

 Найдите квадратный корень из 245.

 Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите квадратный корень из суммы кубов его элементов. Для решения воспользуйтесь циклом for.

Работа с функциями округления
Для решения задач данного блока вам понадобятся следующие функции: Math.round, Math.ceil, Math.floor, toFixed, toPrecision.
 Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.

 Найдите квадратный корень из 587. Округлите результат в большую и меньшую стороны, запишите результаты округления в объект с ключами 'floor' и 'ceil'.

Нахождение максимального и минимального числа
Для решения задач данного блока вам понадобятся следующие методы: Math.max, Math.min.
 Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.

Работа с рандомом
Для решения задач данного блока вам понадобятся следующие методы: Math.random.
 Выведите на экран случайное целое число от 1 до 100.

 Заполните массив 10-ю случайными целыми числами. (Подсказка: нужно воспользоваться циклами for или while). Показать решение.

Работа с модулем
Для решения задач данного блока вам понадобятся следующие методы: Math.abs.
 Даны переменные a и b. Найдите найдите модуль разности a и b. Проверьте работу скрипта самостоятельно для различных a и b.

 Даны переменные a и b. Отнимите от a переменную b и результат присвойте переменной c. Сделайте так, чтобы в любом случае в переменную c записалось положительное значение. Проверьте работу скрипта при a и b, равных соответственно 3 и 5, 6 и 1.

Задачи
 Дан массив arr. Найдите среднее арифметическое его элементов. Проверьте задачу на массиве с элементами 12, 15, 20, 25, 59, 79.

 Напишите скрипт, который будет находить факториал числа.Факториал(обозначается!) - это произведение(умножение) всех целых чисел, меньше данного, и его самого.Например, 4! = 1 * 2 * 3 * 4.
	 
	 Задачи на функции работы со строками в JavaScript

Задача . Поиск и замена
Задача. Дана строка 'aaa@bbb@ccc'. Замените все @ на '!' с помощью глобального поиска и замены.

Решение: в данном случае необходимо воспользоваться методом replace, который выполняет поиск и замену. Однако, при простом варианте использования, эта метод найдет и заменит только первое совпадение:

var str = 'aaa@bbb@ccc';
alert(str.replace('@', '!')); //получим 'aaa!bbb@ccc'
Чтобы заменить все совпадения, воспользуемся глобальным поиском с помощью регулярного выражения:

var str = 'aaa@bbb@ccc';
alert(str.replace(/@/g, '!')); //получим 'aaa!bbb!ccc'
Задача . Методы substr, substring, slice
Задача. Дана строка 'aaa bbb ccc'. Вырежите из нее слово 'bbb' тремя разными способами (через substr, substring, slice).

Решение: слово 'bbb' начинается с символа номер 4 (нумерация с нуля), а заканчивается символом номер 6. Воспользуемся указанными методами:

var str = 'aaa bbb ccc';
alert(str.substr(4, 3)); //substr(откуда отрезать, сколько отрезать)
alert(str.substring(4, 7)); //substring(откуда отрезать, докуда отрезать)
alert(str.slice(4, 7)); //slice(откуда отрезать, докуда отрезать)
Обратите внимание на то, что в методах substring и slice второй параметр должен быть на 1 больше того символа, который мы хотим забрать (то есть, если указать число 7 - то отрезание произойдет до 6 символа включительно).

Задача . Преобразование формата даты
Задача. В переменной date лежит дата в формате '2025-12-31'. Преобразуйте эту дату в формат '31/12/2025'.

Решение: с помощью метода split разобьем нашу строку '2025-12-31' в массив по разделителю '-', при этом в нулевом элементе окажется год, в первом - месяц, во втором - день:

var str = '2025-12-31';
var arr = split('-');
alert(arr);//получим массив ['2025', '12', '31']
Теперь, обращаясь к разным элементам массива по их ключам, сформируем нужную нам строку:

var str = '2025-12-31';
var arr = split('-');
var newStr = arr[2] + '/' + arr[1] + '/'+arr[0];
alert(newStr); //получим строку '31/12/2025'
Задачи для решения
Работа с регистром символов
Для решения задач данного блока вам понадобятся следующие методы: toUpperCase, toLowerCase.
 Дана строка 'js'. Сделайте из нее строку 'JS'.

 Дана строка 'JS'. Сделайте из нее строку 'js'.

Работа с length, substr, substring, slice. Работа с indexOf
Для решения задач данного блока вам понадобятся следующие методы: length, substr, substring, slice, indexOf.
 Дана строка 'я учу javascript!'. Найдите количество символов в этой строке.

 Дана строка 'я учу javascript!'. Вырежите из нее слово 'учу' и слово 'javascript' тремя разными способами (через substr, substring, slice).

 Дана строка 'я учу javascript!'. Найдите позицию подстроки 'учу'.

 Дана переменная str, в которой хранится какой-либо текст. Реализуйте обрезание длинного текста по следующему принципу: если количество символов этого текста больше заданного в переменной n, то в переменную result запишем первые n символов строки str и добавим в конец троеточие '...'. В противном случае в переменную result запишем содержимое переменной str.

Работа с replace
Для решения задач данного блока вам понадобятся следующие методы: replace.
 Дана строка 'Я-учу-javascript!'. Замените все дефисы на '!' с помощью глобального поиска и замены.

Работа с split
Для решения задач данного блока вам понадобятся следующие методы: split.
 Дана строка 'я учу javascript!'. С помощью метода split запишите каждое слово этой строки в отдельный элемент массива.

 Дана строка 'я учу javascript!'. С помощью метода split запишите каждый символ этой строки в отдельный элемент массива.

 В переменной date лежит дата в формате '2025-12-31'. Преобразуйте эту дату в формат '31.12.2025'.

Работа с join
Для решения задач данного блока вам понадобятся следующие методы: join.
 Дан массив ['я', 'учу', 'javascript', '!']. С помощью метода join преобразуйте массив в строку 'я+учу+javascript+!'.

Задачи
 Преобразуйте первую букву строки в верхний регистр.

 Преобразуйте первую букву каждого слова строки в верхний регистр.

 Преобразуйте строку 'var_test_text' в 'varTestText'.Скрипт, конечно же, должен работать с любыми аналогичными строками.
	 
	 Задачи на функции работы с массивами в JavaScript

Задача 
Задача. Даны два массива: ['a', 'b', 'c'] и [1, 2, 3]. Объедините их вместе.

Решение: объединим эти массивы с помощью метода concat:

var a = ['a', 'b', 'c'];
var b = [1, 2, 3];

//Вариант 1:
var c = a.concat(b);
alert(c); //получится массив ['a', 'b', 'c', 1, 2, 3]

//Вариант 2:
var c = b.concat(a);
alert(c); //получится массив [1, 2, 3, 'a', 'b', 'c']
Задача 
Задача. Дан массив ['a', 'b', 'c']. Добавьте ему в конец элементы 1, 2, 3.

Решение: воспользуемся методом push:

var arr = ['a', 'b', 'c'];
arr.push(1, 2, 3);
alert(arr); //получится массив ['a', 'b', 'c', 1, 2, 3]
Задачи для решения
Работа с concat
Для решения задач данного блока вам понадобятся следующие методы: concat.
 Даны два массива: [1, 2, 3] и [4, 5, 6]. Объедините их вместе.

Работа с reverse
Для решения задач данного блока вам понадобятся следующие методы: reverse.
 Дан массив [1, 2, 3]. Сделайте из него массив [3, 2, 1].

Работа с push, unshift
Для решения задач данного блока вам понадобятся следующие методы: push, unshift.
 Дан массив [1, 2, 3]. Добавьте ему в конец элементы 4, 5, 6.

 Дан массив [1, 2, 3]. Добавьте ему в начало элементы 4, 5, 6.

Работа с shift, pop
Для решения задач данного блока вам понадобятся следующие методы: shift, pop.
 Дан массив ['js', 'css', 'jq']. Выведите на экран первый элемент.

 Дан массив ['js', 'css', 'jq']. Выведите на экран последний элемент.

Работа с slice
Для решения задач данного блока вам понадобятся следующие методы: slice.
 Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [1, 2, 3].

 Дан массив [1, 2, 3, 4, 5]. С помощью метода slice запишите в новый элементы [4, 5].

Работа с splice
Для решения задач данного блока вам понадобятся следующие методы: splice.
 Дан массив [1, 2, 3, 4, 5]. С помощью метода splice преобразуйте массив в [1, 4, 5].

 Дан массив [1, 2, 3, 4, 5]. С помощью метода splice запишите в новый массив элементы [2, 3, 4].

 Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 2, 3, 'a', 'b', 'c', 4, 5].

 Дан массив [1, 2, 3, 4, 5]. С помощью метода splice сделайте из него массив [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e'].

Работа с sort
Для решения задач данного блока вам понадобятся следующие методы: sort.
 Дан массив [3, 4, 1, 2, 7]. Отсортируйте его.

Работа с Object.keys
Для решения задач данного блока вам понадобятся следующие методы: Object.keys.
 Дан объект { js: 'test', jq: 'hello', css: 'world' }. Получите массив его ключей.
	 
	 Практика на комбинации стандартных функций JavaScript

Отработка стандартных функций JavaScript
В следующих задачах вы должны применить комбинацию стандартных функций JavaScript, чтобы решить задачу. Все методы вам известны, если вы делали задачи предыдущих уроков и проходили тесты.

 Дана строка. Сделайте заглавным первый символ этой строки не используя цикл. Найдите два решения. Показать решение.

 Дана строка, например, '123456'. Переверните эту строку (сделайте из нее '654321') не используя цикл. Показать решение.

 Проверьте, что строка начинается на http://. Показать решение.

Проверьте, что строка заканчивается на.html.Показать решение.
	 
	 Задачи на основы работы с пользовательскими функциями в JavaScript

Задача 
Задача. Сделайте функцию, которая возвращает куб числа. Число передается параметром.

Решение:

function cube($num) {
	return $num * $num * $num
}
Задачи для решения
Простые функции
 Сделайте функцию, которая возвращает квадрат числа. Число передается параметром.

 Сделайте функцию, которая возвращает сумму двух чисел.

 Сделайте функцию, которая отнимает от первого числа второе и делит на третье.

 Сделайте функцию, которая принимает параметром число от 1 до 7, а возвращает день недели на русском языке.
	 
	 Задачи на приемы работы с флагами на JavaScript

Задачи для решения
На флаги
 Дан массив с числами. Проверьте, что в этом массиве есть число 5. Если есть - выведите 'да', а если нет - выведите 'нет'.

 Дано число, например 31. Проверьте, что это число не делится ни на одно другое число кроме себя самого и единицы. То есть в нашем случае нужно проверить, что число 31 не делится на все числа от 2 до 30. Если число не делится - выведите 'false', а если делится - выведите 'true'.

 Дан массив с числами.Проверьте, есть ли в нем два одинаковых числа подряд.Если есть - выведите 'да', а если нет - выведите 'нет'.
	 
	 Приемы работы с логическими значениями

 Сделайте функцию, которая параметрами принимает 2 числа. Если эти числа равны - пусть функция вернет true, а если не равны - false.

 Сделайте функцию, которая параметрами принимает 2 числа. Если их сумма больше 10 - пусть функция вернет true, а если нет - false.

 Сделайте функцию, которая параметром принимает число и проверяет - отрицательное оно или нет.Если отрицательное - пусть функция вернет true, а если нет - false.
	 
	 Задачи на приемы работы с циклами на JavaScript

Пирамидки
 С помощью цикла for сформируйте строку '123456789' и запишите ее в переменную str.

 С помощью цикла for сформируйте строку '987654321' и запишите ее в переменную str.

 С помощью цикла for сформируйте строку '-1-2-3-4-5-6-7-8-9-' и запишите ее в переменную str.

 Нарисуйте пирамиду, как показано на рисунке, только у вашей пирамиды должно быть 20 рядов, а не 5:

x
xx
xxx
xxxx
xxxxx
 С помощью двух вложенных циклов нарисуйте следующую пирамидку:

1
22
333
4444
55555
666666
7777777
88888888
999999999
 Нарисуйте пирамиду, как показано на рисунке, воспользовавшись циклом for:

xx
xxxx
xxxxxx
xxxxxxxx
xxxxxxxxxx
	 
	 Задачи на приемы работы с массивами на JavaScript

Заполнение массивов
 Заполните массив следующим образом: в первый элемент запишите 'x', во второй 'xx', в третий 'xxx' и так далее.

 Заполните массив следующим образом: в первый элемент запишите '1', во второй '22', в третий '333' и так далее.

 Сделайте функцию arrayFill, которая будет заполнять массив заданными значениями. Первым параметром функция принимает значение, которым заполнять массив, а вторым - сколько элементов должно быть в массиве. Пример: arrayFill('x', 5) сделает массив ['x', 'x', 'x', 'x', 'x']. Показать решение.

 Дан массив с числами. Узнайте сколько элементов с начала массива надо сложить, чтобы в сумме получилось больше 10-ти.

Переворот массива
 Дан массив с числами. Не используя метода reverse переверните его элементы в обратном порядке.

Многомерные массивы
 Дан двухмерный массив с числами, например [[1, 2, 3], [4, 5], [6]]. Найдите сумму элементов этого массива. Массив, конечно же, может быть произвольным. Показать решение.

 Дан трехмерный массив с числами, например[[[1, 2], [3, 4]], [[5, 6], [7, 8]]].Найдите сумму элементов этого массива.Массив, конечно же, может быть произвольным.
	 
	 Правильное использование пользовательских функций

Задача 
Задача. Дан массив с числами. Создайте из него новый массив, где останутся лежать только положительные числа. Создайте для этого вспомогательную функцию isPositive(), которая параметром будет принимать число и возвращать true, если число положительное, и false - если отрицательное.

Решение:

var arr = [1, 2, 3, -1, -2, -3];

function isPositive(num) {
	if (num >=0) {
		return true;
	} else {
		return false;
	}
}

var newArr = [];
for (var i = 0; i <= arr.length; i++) {
	if (isPositive(arr[i])) {
		newArr.push(arr[i]);
	}
}

console.log(newArr);
Задачи для решения
 Сделайте функцию isNumberInRange, которая параметром принимает число и проверяет, что оно больше нуля и меньше 10. Если это так - пусть функция возвращает true, если не так - false.

 Дан массив с числами. Запишите в новый массив только те числа, которые больше нуля и меньше 10-ти. Для этого используйте вспомогательную функцию isNumberInRange из предыдущей задачи.

 Сделайте функцию getDigitsSum (digit - это цифра), которая параметром принимает целое число и возвращает сумму его цифр.

 Найдите все года от 1 до 2022, сумма цифр которых равна 13. Для этого используйте вспомогательную функцию getDigitsSum из предыдущей задачи.

 Сделайте функцию isEven() (even - это четный), которая параметром принимает целое число и проверяет: четное оно или нет. Если четное - пусть функция возвращает true, если нечетное - false.

 Дан массив с целыми числами. Создайте из него новый массив, где останутся лежать только четные из этих чисел. Для этого используйте вспомогательную функцию isEven из предыдущей задачи.

 Сделайте функцию getDivisors, которая параметром принимает число и возвращает массив его делителей(чисел, на которое делится данное число).
	 
	 Практика на работу с пользовательскими функциями

Дана строка. Сделайте заглавным первый символ каждого слова этой строки. Для этого сделайте вспомогательную функцию ucfirst, которая будет получать строку, делать первый символ этой строки заглавным и возвращать обратно строку с заглавной первой буквой.

 Дана строка вида 'var_text_hello'. Сделайте из него текст 'varTextHello'.

 Сделайте функцию inArray, которая определяет, есть в массиве элемент с заданным текстом или нет. Функция первым параметром должна принимать текст элемента, а вторым - массив, в котором делается поиск. Функция должна возвращать true или false.

 Дана строка, например, '123456'.Сделайте из нее '214365'.
	 
	 Продвинутая работа с пользовательскими функциями в JavaScript

Работа с рекурсией
 Дан массив с числами. Выведите последовательно его элементы используя рекурсию и не используя цикл. Показать решение.

 Дано число.Сложите его цифры.Если сумма получилась более 9 - ти, опять сложите его цифры.И так, пока сумма не станет однозначным числом(9 и менее).
	 
	 Задачи на отработку циклов и функций JavaScript

Отработка циклов
В следующих задачах вы должны вспомнить работу с циклами JavaScript.

 Выведите с помощью цикла столбец чисел от 1 до 100. Показать решение.

 Выведите с помощью цикла столбец чисел от 100 до 1. Показать решение.

 Выведите с помощью цикла столбец четных чисел от 1 до 100. Показать решение.

 Заполните массив 10-ю иксами с помощью цикла. Показать решение.

 Заполните массив числами от 1 до 10 с помощью цикла. Показать решение.

 Заполните массив 10-ю случайными числами (дробями) от 0 до 1 с помощью цикла. Дроби округляйте до двух знаков в дробной части. Показать решение.

 Заполните массив 10-ю случайными числами от 1 до 10 с помощью цикла. Показать решение.

 Дан массив с числами. С помощью цикла выведите только те элементы массива, которые больше нуля и меньше 10-ти. Показать решение.

 Дан массив с числами. С помощью цикла проверьте, что в нем есть элемент со значением 5. Как только будет найден первый такой элемент - выведите 'Есть' и оборвите цикл. Если такого элемента нет - ничего не выводите. Показать решение.

 Дан массив с числами. С помощью цикла найдите сумму элементов этого массива. Показать решение.

 Дан массив с числами. С помощью цикла найдите сумму квадратов элементов этого массива. Показать решение.

 Дан массив с числами.Найдите среднее арифметическое его элементов(сумма элементов, делить на количество).Показать решение.
	 
	 Задачи на основы работы с ООП в JavaScript

Простые задачи
 Реализуйте класс Worker (Работник), который будет иметь следующие свойства: name (имя), surname (фамилия), rate (ставка за день работы), days (количество отработанных дней). Также класс должен иметь метод getSalary(), который будет выводить зарплату работника. Зарплата - это произведение (умножение) ставки rate на количество отработанных дней days.

Вот так должен работать наш класс:

var worker = new Worker('Иван', 'Иванов', 10, 31);

console.log(worker.name); //выведет 'Иван'
console.log(worker.surname); //выведет 'Иванов'
console.log(worker.rate); //выведет 10
console.log(worker.days); //выведет 31
console.log(worker.getSalary()); //выведет 310 - то есть 10*31
С помощью нашего класса создайте двух рабочих и найдите сумму их зарплат.

Геттеры и сеттеры
 Модифицируйте класс Worker из предыдущей задачи следующим образом: сделайте все его свойства приватными, а для их чтения сделайте методы-геттеры. Наш класс теперь будет работать так:

var worker = new Worker('Иван', 'Иванов', 10, 31);

console.log(worker.getName()); //выведет 'Иван'
console.log(worker.getSurname()); //выведет 'Иванов'
console.log(worker.getRate()); //выведет 10
console.log(worker.getDays()); //выведет 31
console.log(worker.getSalary()); //выведет 310 - то есть 10*31
 Модифицируйте класс Worker из предыдущей задачи следующим образом: для свойства rate и для свойства days сделайте еще и методы-сеттеры. Наш класс теперь будет работать так:

var worker = new Worker('Иван', 'Иванов', 10, 31);

console.log(worker.getRate()); //выведет 10
console.log(worker.getDays()); //выведет 31
console.log(worker.getSalary()); //выведет 310 - то есть 10*31

//Теперь используем сеттер:
worker.setRate(20); //увеличим ставку
worker.setDays(10); //уменьшим дни
console.log(worker.getSalary()); //выведет 200 - то есть 20*10
Практика
 Реализуйте класс MyString, который будет иметь следующие методы: метод reverse(), который параметром принимает строку, а возвращает ее в перевернутом виде, метод ucFirst(), который параметром принимает строку, а возвращает эту же строку, сделав ее первую букву заглавной и метод ucWords, который принимает строку и делает заглавной первую букву каждого слова этой строки.

Наш класс должен работать так:

var str = new MyString();

console.log(str.reverse('abcde')); //выведет 'edcba'
console.log(str.ucFirst('abcde')); //выведет 'Abcde'
console.log(str.ucWords('abcde abcde abcde')); //выведет 'Abcde Abcde Abcde'
 Реализуйте класс Validator, который будет проверять строки. К примеру, у него будет метод isEmail параметром принимает строку и проверяет, является ли она корректным емейлом или нет. Если является - возвращает true, если не является - то false. Кроме того, класс будет иметь следующие методы: метод isDomain для проверки домена, метод isDate для проверки даты и метод isPhone для проверки телефона:

var validator = new Validator();

console.log(validator.isEmail('phphtml@mail.ru'));
console.log(validator.isDomain('phphtml.net'));
console.log(validator.isDate('12.05.2020'));
console.log(validator.isPhone('+375 (29) 817-68-92')); //тут можете формат своей страны

Задачи на наследование классов в JavaScript
	 
	  Реализуйте класс Student (Студент), который будет наследовать от класса User, подобно тому, как это сделано в теоретической части урока. Этот класс должен иметь следующие свойства: name (имя, наследуется от User), surname (фамилия, наследуется от User), year (год поступления в вуз). Класс должен иметь метод getFullName() (наследуется от User), с помощью которого можно вывести одновременно имя и фамилию студента. Также класс должен иметь метод getCourse(), который будет выводить текущий курс студента (от 1 до 5). Курс вычисляется так: нужно от текущего года отнять год поступления в вуз. Текущий год получите самостоятельно.

Вот так должен работать наш класс:

var student = new Student('Иван', 'Иванов', 2019);

console.log(worker.name); //выведет 'Иван'
console.log(worker.surname); //выведет 'Иванов'
console.log(worker.getFullName()); //выведет 'Иван Иванов'
console.log(worker.year); //выведет 2019console.log(worker.getCourse()); //выведет 3 - третий курс, так как текущий год 2022
Вот так должен выглядеть класс User, от которого наследуется наш Student:

class User {
	constructor(name, surname) {
		this.name = name;
		this.surname = surname;
	}

	getFullName() {
		return this.name + ' ' + this.surname;
	}
				}
	 
	 
Задача:
Напишите функцию, которая будет очищать номер телефона от лишних символов. На выходе должны остаться только цифры. Регулярные выражения использовать нельзя.

Примеры:
clear('8[999] 876-54-321') // 899987654321
				clear('+ 7 (999) 123 - 456 - 89') // 799912345689

	 
Задача с собеседования на стажировку в Яндекс:
Генерация скобочных последовательностей. 
Дано целое число n. Требуется вывести все правильные скобочные последовательности длины 2 ⋅ n, упорядоченные лексикографически (см. https://ru.wikipedia.org/wiki/Лексикографический_порядок).
В задаче используются только круглые скобки.
Желательно получить решение, которое работает за время, пропорциональное общему количеству правильных скобочных последовательностей в ответе, и при этом использует объём памяти, пропорциональный n.

Примеры:
()()() // true
((()))( // false
	)(()())( // false


Задача:
Напишите функцию, с помощью которой можно будет выполнять различные действия с задержкой

// функция, которую нужно реализовать
const sleep = ms => { ... }


Задача:
На вход дается массив чисел, должна вернуться сумма всех положительных чисел. Если суммировать нечего, сумма по умолчанию равна 0.

Пример 
[1, -4, 7, 12] => 1 + 7 + 12 = 20

	 

	 