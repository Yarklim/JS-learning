/* ========== Циклы for, while, do... while =========== */

// Цикл - керуюча конструкція у високорівневих мовах програмування, призначена для організації багаторазового виконання набору інструкцій.
// Тіло циклу - послідовність інструкцій, призначена для багаторазового виконання.
// Ітерація - одноразове виконання тіла циклу.
// Умова виходу - вираз, що визначає, чи буде в черговий раз виконуватися ітерація, або цикл завершиться.
// Лічильник - змінна, що зберігає поточний номер ітерації.
// Цикл не обов'язково містить лічильник, і він не повинен бути один, умова виходу з циклу може залежати від декількох змінних, що змінюються в циклі.

// ? =========== Цикл for ===========
// Цикл з лічильником - цикл, в якому певна змінна змінює своє значення із заданого початкового до кінцевого значення з деяким кроком,
// і для кожного значення цієї змінної тіло циклу виконується один раз.

// Алгоритм виконання циклу for:
// Ініціалізація (initialization) - виконується один раз до початку циклу. Використовується для створення змінної-лічильника і зазначення її початкового значення.
// Умова(condition) - вираз, що оцінюється перед кожною ітерацією(повторенням) циклу.Тіло циклу виконується тільки тоді, коли вираз приводиться до true.
// Цикл завершується, якщо значення буде false.
// Тіло (statements) - набір інструкцій для виконання на кожному повторенні. Виконується, якщо вираз умови приводиться до true.
// Пост-вираз (post-expression) - виконується в кінці кожного повторення циклу, до перевірки умови. Використовується для оновлення змінної-лічильника.
// Змінні-лічильники, за традицією, називаються літерами i, j і k.

// У прикладі оголошується змінна - лічильник i, ініціалізується значенням 0 і цикл виконується доти, доки i <= 20, тобто умова приводиться до true.
// Після кожної ітерації лічильник збільшується на 5.

for (let i = 0; i <= 20; i += 5) {
  console.log(i);
}

// Порахуємо суму чисел до певного значення.

const target = 3;
let sum = 0;

for (let i = 0; i <= target; i += 1) {
  sum += i;
}

console.log(sum);

// Згадаємо про операцію a % b і виведемо остачу від ділення за допомогою циклу.

const max = 10;
for (let i = 0; i < max; i += 1) {
  console.log(`${max} % ${i} = `, max % i);
}

// ! ======== Pre-increment & Post-increment ========== Лучше не использовать - это зло!
for (leti = 0; i < 10; i++) {
	console.log(i);
}

let a = 10;
const b = a++; // Post-increment - значение переменной а увеличится после того, когда произощло выражение присваивания

console.log(a);
console.log(b);

let c = 20;
const d = ++c; // Pre-increment - значение переменной c увеличится до того, когда произощло выражение присваивания

console.log(a);
console.log(b);

//? =========== Цикл for...of ============
// Конструкція for...of оголошує цикл, що перебирає ітерабельні об'єкти, як-от масиви і рядки. 
// Тіло циклу буде виконуватися для значення кожного елемента.Це хороша заміна циклу for, якщо не потрібен доступ до лічильника ітерації.

// for (const variable of iterable) {
//   // тіло циклу
// }

// variable — змінна, яка буде зберігати значення елемента на кожній ітерації.
// iterable — колекція, яка містить ітерабельні (що можна порахувати) елементи, наприклад масив.
// const clients = ["Mango", "Ajax", "Poly"];

// for (const client of clients) {
//   console.log(client);
// }

// const string = "javascript";

// for (const character of string) {
//   console.log(character);
// }

// ? ============ Цикл while ============
// Цикл з передумовою — цикл, який виконується, доки правдива якась умова, зазначена до його початку. 
// Ця умова перевіряється до виконання тіла циклу, тому тіло може не виконатися жодного разу, якщо умова від самого початку - хибна.

// Будемо заповнювати місця в готелі доти, доки поточна кількість клієнтів не буде дорівнювати максимально можливій.

let clientCounter = 18;
const maxClients = 25;

while (clientCounter < maxClients) {
  console.log(clientCounter);
  clientCounter += 1;
}

// Конструкція while створює цикл, який виконує блок коду, доки умова перевірки оцінюється як true.

// condition, тобто умова, оцінюється перед кожною ітерацією циклу.
// Якщо condition оцінюється як true, оператор while виконує statement.
// Якщо condition оцінюється як false, виконання циклу переривається і скрипт продовжує виконувати інструкції після циклу while.

// ? ========= Цикл do...while ==========
// Цикл з постумовою - цикл, в якому умова перевіряється після виконання тіла циклу. З цього випливає, що тіло завжди виконується хоча б один раз.

let password = "";

do {
  password = prompt("Введіть пароль довший 4-х символів", "");
} while (password.length < 5);

console.log("Ввели пароль: ", password);

// Конструкція do...while створює цикл, який виконує блок коду доти, доки condition не поверне false.

// На відміну від циклу while, цикл do...while завжди виконує statement мінімум один раз, перш ніж він оцінить condition.

// Всередині циклу потрібно внести зміни в деяку змінну, щоб переконатися, що вираз дорівнює false після ітерацій. Інакше буде нескінченний цикл.

// ? =========== Оператор break ===============
// Перервати виконання циклу можна в будь-який момент. Для цього існує оператор break, який повністю припиняє виконання циклу і передає управління на рядок після його тіла.

// Знайдемо число 3. Щойно виконається умова if, цикл припинить своє виконання (буде перерваний).

for (let i = 0; i <= 5; i += 1) {
  console.log(i);

  if (i === 3) {
    console.log("Знайшли число 3, перериваємо виконання циклу");
    break;
  }
}

console.log("Лог після циклу");

// ? ========= Оператор continue ===========
// Перериває не увесь цикл, а тільки виконання поточної ітерації. 
// Його використовують, якщо зрозуміло, що на поточній ітерації циклу більше немає що робити або взагалі не потрібно нічого робити, і час переходити до наступної ітерації.
// Використовуємо цикл для введення тільки непарних чисел. 
// Для парних i спрацьовує continue, виконання тіла припиняється і управління передається до наступної ітерації.

const number = 10;

for (let i = 0; i < number; i += 1) {
  if (i % 2 === 0) {
    continue;
  }

  console.log("Непарне i: ", i); // 1, 3, 5, 7, 9
}

// ? ======================== //

/*
 * Циклы (while, do...while, for)
 */

/*
 * While
 */

// while (condition) {
// код, тело цикла (statement)
// }

// let a = 0;

// while (false) {
//   console.log('a: ', a);
//   a += 1;
// }

// console.log('After cycle');

// let b = 0;

// do {
//   console.log('b: ', b);
//   b += 1;
// } while (false);

// 1 iteration: i = 1 c = 1
// 2 iteration: i = 2 c = 3
// 3 iteration: i = 3 c = 6
// 4 iteration: i = 4 c = 10
// 5 iteration: i = 5 c = 15

// let c = 0;

// for (let i = 1; i <= 5; i += 1) {
//   console.log('i ', i);
//   c += i;
//   console.log('c: ', c);
// }

// i = 0
// i = 1
// i = 2
// i = 3
// i = 4
// i = 5
// i = 6

// for (let i = 0; i <= 5; i += 1) {
//   console.log(i);
// }

/*
? Выведите числа от 1 до 50
*/

// for (let num = 1; num <= 50; num += 1) {
//   console.log(num);
// }

// while (num <= 50) {
//   console.log(num);
//   num += 1;
// }

/*
? Найдите сумму чисел от 1 до 100
 */

// let totalSum = 0;

// for (let i = 1; i <= 100; i += 1) {
//   totalSum += i;
// }

// console.log(totalSum);

/*
? Дано число n=1000.
? Делите его на 2 столько раз, пока результат деления не станет меньше 50.
? Какое число получится?
? Посчитайте количество итераций, необходимых для этого, и запишите его в переменную num.
*/

// let n = 1000;
// let num = 0;

// for (; n > 50; num += 1) {
//   n /= 2;
//   console.log(n);
// }

// console.log(`iterations needed: `, num);

/*
 * Do While
 */
// do {
// statement
// } while (condition);

/*
? Напишите цикл, который предлагает prompt ввести число, большее 100.
? Если посетитель ввёл другое число – попросить ввести ещё раз, и так далее.
? Цикл должен спрашивать число пока посетитель не введёт число, большее 100.
? Предполагается, что посетитель вводит только числа;
*/

// let num = 100;

// for (; num <= 100; ) {
//   num = Number(prompt(`write number bigger then 100`));
// }

// console.log(num);

/*
 * For
 */
// for (инициализация; условие; пост-выражение) {
// тело цикла
// }

// for (let i = 0; i < 10; i += 1) {
//   console.log(i);
// }

/*
? При помощи цикла for выведите чётные числа от 2 до 10. Используйте дериктиву continue
*/

// 1 iteration: i = 2;

// for (let i = 2; i <= 10; i += 1) {
//   if (i % 2 === 0) {
//     console.log(i);
//   }
// }

/*
? При помощи цикла for найдите число 3 и при нахождении выведите 'Мы нашли 3'. Используйте дериктиву break
*/

// for (let i = 1; ; i += 1) {
//   if (i === 3) {
//     console.log('Мы нашли 3');
//     break;
//   }
// }

/*
? Напишите программу, которая выводит через console.log все числа от 1 до 100, с тремя исключениями. 
? Для чисел, нацело делящихся на 3, она должна выводить ‘Fizz’,
? а для чисел, делящихся на 5 – ‘Buzz’.
? Для чисел которые кратны 3 и 5 = 'FizzBuzz'
Показати два варіанти через if..else та через if та допоміжну змінну
*/

// for (let i = 1; i <= 100; i += 1) {
//   if (i % 3 === 0 && i % 5 === 0) {
//     console.log('FizzBuzz');
//   } else if (i % 3 === 0) {
//     console.log('Fizz');
//   } else if (i % 5 === 0) {
//     console.log('Buzz');
//   } else {
//     console.log(i);
//   }
// }

// for (let i = 1; i <= 100; i += 1) {
//   let msg = i;

//   if (i % 3 === 0 && i % 5 === 0) {
//     msg = 'FizzBuzz';
//     console.log(msg);
//     continue;
//   }

//   if (i % 3 === 0) {
//     msg = 'Fizz';
//   }

//   if (i % 5 === 0) {
//     msg = 'Buzz';
//   }

//   console.log(msg);
// }

/*
 ? Выведите методом console.log() звездочки от 1 до 7 штук в виде  треугольника таким образом:
 ? *
 ? **
 ? ***
 ? ****
 ? *****
 ? ******
 ? *******
 */

// let star = '';

// for (let i = 7; i >= 1; i -= 1) {
//   //   console.log('iteration number: ', i);
//   star += '*';
//   console.log(star);
// }

// for (let i = 1; i <= 7; i += 1) {
//   console.log('iteration number: ', i);
//   star += '*';
//   console.log(star);
// }

// Область бачення:

// let num = 5;

// console.log(num);

// if (true) {
//   let num = 10;

//   console.log(num);

//   if (true) {
//     let num = 30;
//     console.log(num);
//   }
// }

// console.log(num)

// for (let i = 100; i >= 0; i -= 1) {
//   console.log(i);
// }

// const number = 20; // 20

// if (true) {
//   const number = 10; // 10

//   console.log(number); // 10
// }

// console.log(number); // 20

// for (let i = 100; i >= 0; i -= 1) {
//   //   let i = 0;
//   console.log(i);
// }

// const i = 618;

// for (let b = 0; b <= 100; b += 1) {
//   console.log(i);
// }