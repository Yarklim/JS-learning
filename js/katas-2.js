//?-------------------------------------------------------
/*
Take a Number And Sum Its Digits Raised To The Consecutive 
Powers And ....¡Eureka!!

Номер 898989 является первым целым числом с более чем одной цифрой, 
которое выполняет свойство, частично представленное в названии этого ката. 
Что толку говорить "Эврика"? Потому что эта сумма дает одно и то же число:
89 знак равно 81+9289 = 8^1 + 9^289 знак равно 8 
1
 +9 
2
 

Следующее число в наличии этого свойства 135135135:

Посмотрите это свойство еще раз: 135 знак равно 11+32+53135 = 1^1 + 3^2 + 5^3135 знак равно 1 
1
 +3 
2
 +5 
3
 

Задача
Нам нужна функция для сбора этих чисел, которая может получить два целых числаааа,
бббкоторый определяет диапазон[а,б][а, б][ а ,б ](включительно) и выводит список 
отсортированных чисел в диапазоне, удовлетворяющем описанному выше свойству.

Примеры
Давайте посмотрим на некоторые случаи (ввод -> вывод):

1, 10  --> [1, 2, 3, 4, 5, 6, 7, 8, 9]
1, 100 --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]
Если в диапазоне нет таких чисел[а,б][а, б][ а ,б ]функция должна вывести пустой 
список.

90, 100 --> []
*/
function sumDigPow(a, b) {
  // Your code here
}
// console.log(sumDigPow(1, 10)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]
// console.log(sumDigPow(1, 100)); // [1, 2, 3, 4, 5, 6, 7, 8, 89]
// console.log(sumDigPow(10, 100)); // [89]
// console.log(sumDigPow(50, 100)); // []
// console.log(sumDigPow(50, 150)); // [[89, 135]

//? ------------------------------------------------------
/*
Ones and Zeros

Учитывая массив единиц и нулей, преобразуйте эквивалентное двоичное значение в целое число.

Например: [0, 0, 0, 1]рассматривается как 0001 двоичное представление 1.

Примеры:

Testing: [0, 0, 0, 1] ==> 1
Testing: [0, 0, 1, 0] ==> 2
Testing: [0, 1, 0, 1] ==> 5
Testing: [1, 0, 0, 1] ==> 9
Testing: [0, 0, 1, 0] ==> 2
Testing: [0, 1, 1, 0] ==> 6
Testing: [1, 1, 1, 1] ==> 15
Testing: [1, 0, 1, 1] ==> 11
Однако массивы могут иметь разную длину, а не только 4.
*/
const binaryArrayToNumber = (arr) => {
  // your code
};
// console.log(binaryArrayToNumber([0, 0, 0, 1])); // 1
// console.log(binaryArrayToNumber([0, 0, 1, 0])); // 2
// console.log(binaryArrayToNumber([1, 1, 1, 1])); // 15
// console.log(binaryArrayToNumber([0, 1, 1, 0])); // 6

//? ------------------------------------------------------
/*

*/

//? ------------------------------------------------------
/*

*/
//? ------------------------------------------------------
/*

*/
//? ------------------------------------------------------
/*
Simple Encryption #1 - Alternating Split

Реализуйте алгоритм псевдошифрования, который для заданной строки 
S и целого числа N объединяет все символы с нечетным индексом S со всеми 
символами с четным индексом S, этот процесс следует повторять несколько N раз.

Примеры:

encrypt("012345", 1)  =>  "135024"
encrypt("012345", 2)  =>  "135024"  ->  "304152"
encrypt("012345", 3)  =>  "135024"  ->  "304152"  ->  "012345"

encrypt("01234", 1)  =>  "13024"
encrypt("01234", 2)  =>  "13024"  ->  "32104"
encrypt("01234", 3)  =>  "13024"  ->  "32104"  ->  "20314"
Вместе с функцией шифрования вы также должны реализовать функцию дешифрования, 
которая меняет процесс.

Если строка S является пустым значением или целое число N не является 
положительным, вернуть первый аргумент без изменений.
*/
function encrypt(text, n) {}

function decrypt(encryptedText, n) {}

// console.log(encrypt('This is a test!', 0)); // "This is a test!"
// console.log(encrypt('This is a test!', 1)); // "hsi  etTi sats!"
// console.log(encrypt('This is a test!', 2)); // "s eT ashi tist!"
// console.log(encrypt("This kata is very interesting!", 1)); // "hskt svr neetn!Ti aai eyitrsig"

// console.log(decrypt(' Tah itse sits!', 3)); // "This is a test!"
// console.log(decrypt("This is a test!", 4)); // "This is a test!"
// console.log(decrypt('This is a test!', -1)); // "This is a test!"
// console.log(decrypt('hskt svr neetn!Ti aai eyitrsig', 1)); // "This kata is very interesting!"

//? ------------------------------------------------

/*
Product of consecutive Fib numbers

Числа Фибоначчи — это числа в следующей целочисленной последовательности (Fn):

0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...

такие как

F(n) = F(n-1) + F(n-2), где F(0) = 0 и F(1) = 1.

Имея число, скажем, prod (для произведения), мы ищем два числа Фибоначчи F(n) и F(n+1), проверяя

F(n) * F(n+1) = произв.

Ваша функция productFib принимает целое число (prod) и возвращает массив:

[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)
в зависимости от языка, если F(n) * F(n+1) = prod.

Если вы не найдете два последовательных подтверждения F (n) F(n) * F(n+1) = prod, вы вернетесь

[F(n), F(n+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)
F(n) является наименьшим из таких, как F(n) * F(n+1) > prod.

Некоторые примеры возврата:
(зависит от языка)

productFib(714) # should return (21, 34, true), 
                # since F(8) = 21, F(9) = 34 and 714 = 21 * 34

productFib(800) # should return (34, 55, false), 
                # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 < 800 < 34 * 55
-----
productFib(714) # should return [21, 34, true], 
productFib(800) # should return [34, 55, false], 
-----
productFib(714) # should return {21, 34, 1}, 
productFib(800) # should return {34, 55, 0},        
-----
productFib(714) # should return {21, 34, true}, 
productFib(800) # should return {34, 55, false}, 
Примечание:
Вы можете увидеть примеры для вашего языка в разделе "Образцы тестов".
*/
function productFib(prod) {
  // ...
}
// console.log(productFib(4895)); // [55, 89, true]
// console.log(productFib(5895)); // [89, 144, false]
// console.log(productFib(74049690)); // [6765, 10946, true]
//? ------------------------------------------------
/*
String incrementer

Ваша задача — написать функцию, которая увеличивает строку, 
чтобы создать новую строку.

Если строка уже заканчивается числом, число должно быть увеличено на 1.
Если строка не заканчивается цифрой. число 1 должно быть добавлено к новой строке.
Примеры:

foo -> foo1

foobar23 -> foobar24

foo0042 -> foo0043

foo9 -> foo10

foo099 -> foo100

Внимание: Если в числе есть ведущие нули, следует учитывать количество цифр.
*/
function incrementString(strng) {
  // return incrementedString
}
// console.log(incrementString('foobar000')); // "foobar001"
// console.log(incrementString('foobar999')); // "foobar1000"
// console.log(incrementString('foo')); // "foo1"
// console.log(incrementString('009')); // "010"

//? ------------------------------------------------
